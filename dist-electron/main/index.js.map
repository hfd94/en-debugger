{"version":3,"file":"index.js","sources":["../../electron/main/sqlite/index.ts","../../electron/main/index.ts"],"sourcesContent":["import { app } from \"electron\";\r\nimport * as path from \"path\";\r\nimport * as sqlite3 from \"sqlite3\";\r\nimport { queryParam, insertParam, updateParam, deleteParam } from \"./types\";\r\n\r\nconst userDataPath = app.getPath(\"userData\");\r\nconsole.log(userDataPath)\r\nconst dbPath = path.join(userDataPath, \"Storage.bin\");\r\n\r\nconsole.log(\"Database path:\", dbPath);\r\n\r\nclass Database {\r\n    private db: sqlite3.Database;\r\n\r\n    constructor() {\r\n        this.db = new sqlite3.Database(dbPath);\r\n    }\r\n\r\n    open(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.db.serialize(() => {\r\n                this.db.run(\"PRAGMA foreign_keys = ON\");\r\n                console.log(\"Connected to the database.\");\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    close(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.db.close((err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    console.log(\"Database closed.\");\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    query(param: queryParam): Promise<any[]> {\r\n        return new Promise<any[]>((resolve, reject) => {\r\n            this.db.all(param.sql, param.params, (err, rows) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(rows);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    insert(param: insertParam): Promise<number> {\r\n        return new Promise<number>((resolve, reject) => {\r\n            const keys = Object.keys(param.data);\r\n            const values = Object.values(param.data);\r\n            const placeholders = keys.map(() => \"?\").join(\",\");\r\n            const sql = `INSERT INTO ${param.table} (${keys.join(\r\n                \",\"\r\n            )}) VALUES (${placeholders})`;\r\n\r\n            this.db.run(sql, values, function (err) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(this.lastID);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    update(param: updateParam): Promise<number> {\r\n        return new Promise<number>((resolve, reject) => {\r\n            const entries = Object.entries(param.data)\r\n                .map(([key, value]) => `${key} = ?`)\r\n                .join(\",\");\r\n            const params = Object.values(param.data);\r\n            const sql = `UPDATE ${param.table} SET ${entries} WHERE ${param.condition}`;\r\n\r\n            this.db.run(sql, params, function (err) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(this.changes);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(param: deleteParam): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            const sql = `DELETE FROM ${param.table} WHERE ${param.condition}`;\r\n\r\n            this.db.run(sql, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nconst db = new Database();\r\n\r\nexport const initSqlite = async () => {\r\n    try {\r\n        await db.open();\r\n        await db.query({\r\n            sql: `CREATE TABLE tree (\r\n                    id TEXT PRIMARY KEY,       -- 节点的唯一标识符（字符串）\r\n                    name TEXT NOT NULL,        -- 节点名称\r\n                    parentId TEXT,             -- 父节点 ID，如果是根节点，则为 NULL\r\n                    type TEXT,                 -- 节点类型（可选）\r\n                    configure TEXT,            -- 配置\r\n                    FOREIGN KEY (parentId) REFERENCES tree(id) -- 外键约束，确保 parentId 是有效的 id\r\n                );`\r\n        })\r\n\r\n        console.log(\"Database initialized.\");\r\n    } catch (err) {\r\n        console.error(\"Error opening database:\", err);\r\n    }\r\n};\r\n\r\nexport const sqQuery = db.query.bind(db);\r\nexport const sqInsert = db.insert.bind(db);\r\nexport const sqUpdate = db.update.bind(db);\r\nexport const sqDelete = db.delete.bind(db);","import { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport { fileURLToPath } from 'node:url'\r\nimport path from 'node:path'\r\nimport os from 'node:os'\r\nimport { initSqlite } from './sqlite'\r\n\r\nconst require = createRequire(import.meta.url)\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs   > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\r\n\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n    ? path.join(process.env.APP_ROOT, 'public')\r\n    : RENDERER_DIST\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n    app.quit()\r\n    process.exit(0)\r\n}\r\n\r\nlet win: BrowserWindow | null = null\r\nconst preload = path.join(__dirname, '../preload/index.js')\r\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n    win = new BrowserWindow({\r\n        title: 'Main window',\r\n        autoHideMenuBar: true,\r\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n        width: 1120,\r\n        height: 720,\r\n        minWidth: 1120,\r\n        minHeight: 720,\r\n        frame: false,\r\n        webPreferences: {\r\n            devTools: true,\r\n            // nodeIntegration: true,\r\n            // contextIsolation: true,\r\n            preload,\r\n            // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n            // nodeIntegration: true,\r\n\r\n            // Consider using contextBridge.exposeInMainWorld\r\n            // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n            // contextIsolation: false,\r\n        },\r\n    })\r\n\r\n    if (VITE_DEV_SERVER_URL) { // #298\r\n        win.loadURL(VITE_DEV_SERVER_URL)\r\n        // Open devTool if the app is not packaged\r\n        win.webContents.openDevTools()\r\n    } else {\r\n        win.loadFile(indexHtml)\r\n    }\r\n\r\n    // Test actively push message to the Electron-Renderer\r\n    win.webContents.on('did-finish-load', () => {\r\n        win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n    })\r\n\r\n    // Make all links open with the browser, not with the application\r\n    win.webContents.setWindowOpenHandler(({ url }) => {\r\n        if (url.startsWith('https:')) shell.openExternal(url)\r\n        return { action: 'deny' }\r\n    })\r\n    // win.webContents.on('will-navigate', (event, url) => { }) #344\r\n}\r\n\r\napp.whenReady().then(async () => {\r\n    await initSqlite();\r\n    createWindow();\r\n})\r\n\r\napp.on('window-all-closed', () => {\r\n    win = null\r\n    if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n    if (win) {\r\n        // Focus on the main window if the user tried to open another\r\n        if (win.isMinimized()) win.restore()\r\n        win.focus()\r\n    }\r\n})\r\n\r\napp.on('activate', () => {\r\n    const allWindows = BrowserWindow.getAllWindows()\r\n    if (allWindows.length) {\r\n        allWindows[0].focus()\r\n    } else {\r\n        createWindow()\r\n    }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (_, arg) => {\r\n    const childWindow = new BrowserWindow({\r\n        webPreferences: {\r\n            preload,\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n        },\r\n    })\r\n\r\n    if (VITE_DEV_SERVER_URL) {\r\n        childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\r\n    } else {\r\n        childWindow.loadFile(indexHtml, { hash: arg })\r\n    }\r\n})\r\n\r\n\r\nipcMain.on('window-min', function () {\r\n    if (win) {\r\n        win.minimize();\r\n    }\r\n})\r\n\r\nipcMain.on('window-max', function () {\r\n    if (!win) { return }\r\n    if (win.isMaximized()) {\r\n        win.restore();\r\n    } else {\r\n        win.maximize();\r\n    }\r\n})\r\nipcMain.on('window-close', function () {\r\n    if (!win) { return }\r\n    win.close();\r\n})\r\n\r\n\r\n\r\n\r\nipcMain.handle(\"insetWorkDir\", (_, args) => {\r\n    console.log(args)\r\n    return \"hello world\"\r\n})"],"names":["app","path","sqlite3","createRequire","__dirname","fileURLToPath","BrowserWindow","shell","ipcMain"],"mappings":"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"}